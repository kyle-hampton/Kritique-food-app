<div class="food-name">
  <div class="">

    <% if  @food.image.thumb.url == nil%>
     <p> Ah there's no image</p>
    <% else %>
      <div class="">
        <%= image_tag @food.image.thumb.url, :class => 'show-image' %>
      </div>
    <% end %>
  </div>

    <h1><%= @food.food_name %></h1>

  <p>Review by: <%= @food.id %></p>

  <div class="hr">
    <hr>
  </div>
  <div class="food-breakdown">
    <strong>Food type:</strong> <%= @food.food_type %>
  </div>


  <div class="hr">
    <hr>
  </div>
  <div class="food-breakdown">
    <strong>Description:</strong> <%= @food.food_description %>
  </div>

  <div class="hr">
    <hr>
  </div>
  <div class="food-breakdown">
    <strong>Review:</strong> <%= @food.food_review %>
  </div>
  <div class="hr">
    <hr>
  </div>
  <div class="food-breakdown">
    <strong>Location:</strong> <%= @food.location %>
  </div>
</div>
<div id="map" value=" <%= @food.location %> "></div>
<input id="pac-input" class="controls" type="text" value=" <%= @food.location %> ">

<br>

<% if signed_in?%>
<h2>Different option? leave review and score for others to see</h2>

<%=link_to 'Create review', new_review_path(:food_id => @food.id) %>
<% end %>

<% @review.each do |r|%>

    <% if r.food_id == @food.id %>
    <div class="">
      <div class="">
        <strong>Review:</strong> <%= r.review%>
      </div>
      <div class="">
        <strong>Score:</strong> <%= r.score%>
      </div>
      <hr>
    </div>

    <% end %>
<% end %>

<script>

// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.

// This example requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

function initAutocomplete() {
var map = new google.maps.Map(document.getElementById('map'), {
center: {lat: 39.9526, lng: -75.1652},
zoom: 13,
mapTypeId: 'roadmap'
});

// Create the search box and link it to the UI element.
var input = document.getElementById('pac-input');
var searchBox = new google.maps.places.SearchBox(input);
map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

// Bias the SearchBox results towards current map's viewport.
map.addListener('bounds_changed', function() {
searchBox.setBounds(map.getBounds());
});

var markers = [];
// Listen for the event fired when the user selects a prediction and retrieve
// more details for that place.
searchBox.addListener('places_changed', function() {
var places = searchBox.getPlaces();

if (places.length == 0) {
  return;
}

// Clear out the old markers.
markers.forEach(function(marker) {
  marker.setMap(null);
});
markers = [];

// For each place, get the icon, name and location.
var bounds = new google.maps.LatLngBounds();
places.forEach(function(place) {
  if (!place.geometry) {
    console.log("Returned place contains no geometry");
    return;
  }
  var icon = {
    url: place.icon,
    size: new google.maps.Size(71, 71),
    origin: new google.maps.Point(0, 0),
    anchor: new google.maps.Point(17, 34),
    scaledSize: new google.maps.Size(25, 25)
  };


  // Create a marker for each place.
  markers.push(new google.maps.Marker({
    map: map,
    icon: icon,
    title: place.name,
    position: place.geometry.location
  }));

  if (place.geometry.viewport) {
    // Only geocodes have viewport.
    bounds.union(place.geometry.viewport);
  } else {
    bounds.extend(place.geometry.location);
  }
});
console.log(markers)
map.fitBounds(bounds);
});
}

</script>
